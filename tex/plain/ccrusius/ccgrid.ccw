\secpagedepth=1
\def\li{\item{$\bullet$}}
\def\LuaTeX{\hbox{Lua\TeX}}
\def\title{CCGRID}
\def\haccum{h_{\rm acc}}
@** Baseline grid.
This package modifies \TeX{}'s page building routine so that all the
main baselines are on an equally spaced (by |\baselineskip|) grid.
This not only mimicks traditional typesetting, but also results
in a more pleasing document.
\medskip
\li In multiple colum documents, where the problem is most visible,
it is not uncommon for baselines not
to align accross colums, resulting in an unbalanced layout.
\li In single page documents the problem is less obvious, but it
shows up both in facing pages -- where each page can be considered
to be one column in a double-column document --, and on the same
sheet of paper, if the baselines of the pages on that sheet do not align.
This last problem is more visible on more ``transparent'' paper, but
one can readily see it, for example, by looking at page~51 of the \TeX{}book
against light: although the baselines of page~51 and~52 start aligned,
towards the end of the page they are completely out of sync.
@ The solution for this problem seems to have eluded all trials so far,
and this is not surprising: one needs to change the page building process
to make it work. In particular, at every point when \TeX{} is considering
the addition of vertical material to the output box, we must filter it to
make sure said material would end up aligned to the baseline grid. This is
very hard to do (impossible?) in \TeX{} alone, but Lua\TeX{} has
enough hooks to make this possible.
@ I will
describe the algorithm in more detail later, but the idea is as follows:
Firstly, we will keep track of the total height of what was already
added to the output box. Let us call that value~$\haccum$.
Then, we process each element in the \TeX{} recent
vertical contribution list.
\medskip
\li If the element is a glue with natural dimension~$g$, we remove all stretch
from it, and update~$\haccum\leftarrow \haccum+g$.
\li If the element is a horizontal list with height~$h$ and depth~$d$, we
insert enough glue~$g$ before it to make $(\haccum + g + h)\bmod y_{\rm grid}=0$ (in other
words, to align its baseline with the grid), and update~$\haccum\leftarrow \haccum + g + h + d$.
\medskip
There are more things we need to do, but the basic idea should be clear:
we want to only feed \TeX's output box with things that are already aligned
to the baseline grid, and give \TeX{} no opportunity to change that by not
giving it any room to stretch. One could say we want to make the output
box look like an airplane's ``economy class'' section.
@* Using this package.
This package is one part of my \TeX{} macro set, and has to be used inside it.
This means you must be willing to use Eplain instead of La\TeX, for example.
Making this package portable should not be too difficult if you wish to do so
-- if you do, please publish your work so others can use it.

If you still want to use this, clone my |texmf| tree from GitHub, at
|https://github.com/ccrusius/texmf|, make sure \TeX{} can find it,
and add the following to your document's preamble. The call
to |\ccgridsetup| is to make sure everything is
properly arranged: it is already called once when you include
the package, but if your preamble changes things after that
|ccgrid| may have to recompute some values.
@<Enabling the baseline grid in your document@>={tex}
\input ccgrid
% ... rest of preamble ...
\ccgridsetup
@** The package files.
@ @<*{ccgrid.lua}@>=
local exports = {}
@<Lua global variables@>
@<Lua functions@>
@<Building a gridded page@>
return exports
@ @<*{ccgrid.tex}@>=
@<\TeX{} package preamble@>
@<\TeX{} global variables@>
@<\TeX{} macros@>
@<Set up grid parameters@>
@<\TeX{} package postamble@>
@ @<\TeX{} package preamble@>={tex}
\input ccbase
\pragmaonce{ccgrid}
\input ccshowbox
\directlua{ccgrid = dofile(kpse.find_file("ccgrid.lua"))}
\makeatletter
@ @<\TeX{} package postamble@>={tex}
\makeatother
\endinput
@** Debugging.
Things did go wrong quite often with this, as baseline gridding is not something
\TeX{} was designed to do, so I had to set up a decent enough debugging
infrastructure. You will probably not be debugging this package, but the
code needs to be here anyway.
In order to control what debugging messages are
printed, you have to set |ccgrid|'s log level to a suitable value, as follows:
$$\vbox{\halign{\strut\hfil{\tt #}\hfil&\quad#\hfil\cr
\omit\bf Level\hfil&\bf Information\hfil\cr
0 & Nothing.\cr
1 & Adds a baseline grid to every page.\cr
2 & Prints the contents of |\box255| every page.\cr
3 & Trace page building process.\cr}}$$
@ In Lua, the log level is stored in the global |loglevel| variable.
We will keep a copy of in in \TeX's |\ccgridloglevel| counter. To keep both in
sync, you should always change the log level by calling the |\setccgridloglevel|
\TeX{} macro.
@<Lua global variables@>={lua}
local loglevel = 0
@ @<\TeX{} global variables@>={tex}
\newcount\ccgridloglevel\ccgridloglevel=0
@ @<\TeX{} macros@>={tex}
\def\setccgridloglevel#1{%
  \directlua{ccgrid.setloglevel(#1)}%
  \global\ccgridloglevel=#1}
@ @<Lua functions@>={lua}
local function setloglevel(x) loglevel = x end
exports["setloglevel"] = setloglevel
@ Most of the debugging messages are printed by the Lua module via a call
to the |typeout| function below:
@<Lua functions@>={lua}
local function typeout(lvl,str)
  if loglevel >= lvl then texio.write_nl(str) end
end
@** Displaying a baseline grid.
To enable the display of a baseline grid at every
page, use the macro below. Doing this before a final build is a good idea, as
it will quickly tell you whether things are working or not. The macro works
by setting the appropriate log level, as described previously.
@<\TeX{} macros@>={tex}
\def\ccgriddraft{\setccgridloglevel{1}}
@ To print a baseline grid at every page, we redefine the |\output|
routine.
@<\TeX{} macros@>={tex}
\newtoks\ccgrid@@prevoutput
\ccgrid@@prevoutput=\expandafter{\the\output}
\output={%
  \ifnum\ccgridloglevel>0%
    \setbox0=@<Baseline grid box@>
    \setbox255=\vbox to\vsize{\vtop to0pt{\box0\vss}\hrule height 0pt\box255}
  \fi
  \the\ccgrid@@prevoutput}
@ @<Baseline grid box@>={tex}
\vbox to\vsize{
  @<Baseline grid rule@>
  \vskip\topskip
  \cleaders\vbox to\baselineskip{
    @<Baseline grid rule@>
    \vfil%
    @<Baseline grid rule@>}
  \vfill}
@ @<Baseline grid rule@>={tex}
\kern-0.2pt\hrule height0.2pt depth0.2pt width\hsize\kern -0.2pt
@** Parameter initialization.
A gridded \TeX{} run must have some parameters properly initialized.
This includes removing stretch from all known skips and sizing things
such as |\vsize| properly. All of this is done in the |\ccgridsetup|
macro, which is called automatically when |ccgrid.tex| is read.
@<Set up grid parameters@>={tex}
\def\ccgridsetup{
  @<Remove glue from |\baselineskip| and set the Lua grid@>
  @<Remove glue from other \TeX{} skips@>
  @<Set |\vsize| to a multiple of |\baselineskip|@>
  @<Set |\lineskip| and |\lineskiplimit|@>
  \raggedbottom% We do our own thing, but let's tell others this is the intent
}
\ccgridsetup
@ The spacing for our grid should be essentially |\baselineskip|, but we need
to fix this value at the beginning of the document in a separate variable,
since \TeX{} may change it mid-course. In Lua, we keep the value in the
|baselineskip| variable, and the user can only change it by first
setting |\baselineskip| accordingly, and then calling the \TeX{}
|\ccgridseput| macro.
@<Lua global variables@>={lua}
local baselineskip = 0
@ @<Lua functions@>={lua}
local function setgrid(x) baselineskip=x end
exports["setgrid"] = setgrid
@ Some basic math has to be performed when setting these parameters,
and that is done on the Lua side of things.
@<Lua functions@>={lua}
local function snapdown(x)
  return baselineskip*math.floor(x/baselineskip)
end
exports["snapdown"] = snapdown
local function freeze(x)
  return (ccbase.spstr(ccbase.tosp(x))).." plus 0pt minus 0pt"
end
exports["freeze"] = freeze
@ @<\TeX{} macros@>={tex}
\def\ccgrid@@freeze#1{\directlua{tex.print(ccgrid.freeze("#1"))}}
@ @<Remove glue from |\baselineskip| and set the Lua grid@>={tex}
\global\baselineskip=\ccgrid@@freeze{\the\baselineskip}
\directlua{ccgrid.setgrid(ccbase.tosp("\the\baselineskip"))}
\typeout{ccgrid: baselineskip=\the\baselineskip}
@ @<Remove glue from other \TeX{} skips@>={tex}
\global\topskip=\ccgrid@@freeze{\the\topskip}
\global\parskip=\ccgrid@@freeze{\the\parskip}
\global\abovedisplayskip=\ccgrid@@freeze{\the\abovedisplayskip}
\global\belowdisplayskip=\ccgrid@@freeze{\the\belowdisplayskip}
\global\abovedisplayshortskip=\ccgrid@@freeze{\the\abovedisplayshortskip}
\global\belowdisplayshortskip=\ccgrid@@freeze{\the\belowdisplayshortskip}
@ @<Set |\vsize| to a multiple of |\baselineskip|@>={tex}
\global\advance\vsize by-\topskip
\global\vsize=\directlua{tex.print(%
  ccbase.spstr(ccgrid.snapdown(ccbase.tosp("\the\vsize"))))}
\global\advance\vsize by\topskip
\typeout{ccgrid: vsize=\the\vsize}
@ @<Set |\lineskip| and |\lineskiplimit|@>={tex}
\global\lineskip=0pt
\global\lineskiplimit=-0.5\baselineskip
@ There is one last thing to do, which is to make sure our ragged bottom
is ragged. \TeX{} |\raggedbottom| command inserts a rather small, for
our purposes, ``|1fil|'' glue at the end of the page. This is easily
undone by other infinite glues that may be sprinkled around.

We register a \LuaTeX{} |pre_output_filter| callback and insert a very
large glue at the end of every page, hopefully smothering any other glue that
may be present. (We also take the opportunity and print the log level~2
output box in the same function.)
@<Lua functions@>={lua}
local function output(head)
  node.insert_after(head,node.slide(head),ccbase.mkglue(0,10000*2^16,3,0,0))
  typeout(2,"OUTPUT BOX:")
  if loglevel >= 2 then ccshowbox.showheadlist(head,0,".") end
  return true
end
callback.register("pre_output_filter",output)
@** Building a gridded page.
Right before \LuaTeX{} moves material into the main vertical list,
it calls a user function registered as a |buildpage_filter| callback.
We will use this to massage the material so it will be aligned to
the grid when \LuaTeX{} finally inserts it into the vertical list.

To do that, we must keep track of all that was already inserted
into that list. Hopefully it was all aligned, but if it was not (for
some reason), we must try to start aligning things as soon as possible.

The only thing we need to know about what was already inserted is
the total natural height. We will store this in the |haccum| global
variable, and refer to it as $\haccum$ in the documentation.
@<Lua global variables@>={lua}
local haccum = 0
@ When \LuaTeX{} calls the buildpage filter callback, it gives the
function the reason why it is being called, as a string. We will
build a map from the reasons to the functions that will be called
and store it in |buildpage_actions|. We will describe what
each means, and what each function does, as we implement them.
@<Building a gridded page@>={lua}
local buildpage_actions = {
  @<Build page actions@>
}
@ Once we have that map, the callback is simple: apart from
a debugging statement, it simply executes the appropriate function
on the list of potential contributions. Those are found
in the global \LuaTeX{} variable |tex.lists.contrib_head|.
@<Building a gridded page@>={lua}
local function buildpage(reason)
  local head = tex.lists.contrib_head
  typeout(3,string.format("BUILDPAGE("..reason..") haccum=%fpt",haccum/2^16))
  local action = buildpage_actions[reason]
  if action then action(head) end
end
callback.register("buildpage_filter",buildpage)
@ Let us start with the simplest action. The calling reason is |after_output|
when \LuaTeX{} has just finished shipping a page. When this happens,
the main
vertical material list becomes empty, and all have to do is to reset $\haccum$.
@<Build page actions@>={lua}
after_output = function(head) haccum=0 end,
@ Next, let us define a few no-op actions for debugging purposes:
@<Build page no-op action@>={lua}
function(head)
  if loglevel >= 3 then
    ccshowbox.showheadlist(head,0,"  == .")
  end
end
@ @<Build page actions@>=
before_display = @<Build page no-op action@>,
hmode_par      = @<Build page no-op action@>,
new_graf       = @<Build page no-op action@>,
vmode_par      = @<Build page no-op action@>,
@ The |pre_box| call signals that new material will be added via a |box| call.
The reason that is important for us is because the |box| call will refer to
both old and new material, so we have to use the |pre_box| call to identify
where the old material ends, and the new starts. The list seen in a |pre_box|
call is the old material, and the list |box| sees is (some) of the old, plus
the new. We keep track of where the old material ends in the |lastprebox|
variable, which we update in the |pre_box| call.
@<Lua global variables@>={lua}
local lastprebox = nil
@ @<Build page actions@>={lua}
pre_box = function(head) lastprebox=node.slide(head) end,
@ So far, we have only done book-keeping activities. Let's start modifying
the contents of the contributions list, starting with glues. When we encounter
glue, we simply remove its stretch so it does not affect any material on
the page, and update $\haccum$ to reflect the new height of the page once
the glue is inserted.

The |head| argument represents the head of the contributions list,
and the |glue| parameter is a pointer to the glue, in that contribution list,
we want to modify. The function returns the new head and glue.
As an aside, I could probably have replaced the glue with a kern, but either
works.
@<Lua functions@>={lua}
local function freeze_glue(head,glue)
  local spec = glue.spec
  local width = spec.width
  haccum = haccum + width
  if spec.stretch == 0 and spec.shrink == 0 then return head, glue end

  local noglue = ccbase.mkglue(glue.spec.width,0,0,0,0)
  head, noglue = node.insert_after(head,glue,noglue)
  head, noglue = node.remove(head,glue)

  -- I think we should free "glue" now, but that makes things crash.
  -- if spec.writable then node.free(glue) end
  return head, noglue
end
@ Next, we deal with a horizontal box, or |hlist| in \LuaTeX{} parlance.
This is where the real work happens: we want to align all |hlist|s baselines to
our grid. In order to do that, we insert enough glue to make that happen.
\medskip
\li First, we update $\haccum\leftarrow\haccum+h$, where~$h$ is the box height.
  This is where the box baseline would be if we left it to \TeX{} alone.
\li Then, we compute how much we have to add in skip to make $\haccum$ a
  multiple of the baseline grid. If~$s$ is our skip, we want
  $\haccum+s=b\lceil{\haccum\over b}\rceil$, which gives us a simple
  expression for~$s$.
  If the skip is non-zero, we insert the glue and update $\haccum\leftarrow\haccum+s$.
\li Now the box is placed correctly, but the material may still continue past the
  baseline, so we update $\haccum\leftarrow\haccum+d$, where~$d$ is the box depth.
\medskip
The function inputs and outputs are similar to those of |freeze_glue|.
@<Lua functions@>={lua}
local function align_hlist(head,hlist)
  haccum = haccum + hlist.height
  local skip = baselineskip*math.ceil(haccum/baselineskip) - haccum
  if skip > 0 then
    typeout(3,string.format("  ( shifting %fpt )",skip/2^16))
    head = node.insert_before(head,hlist,ccbase.mkglue(skip,0,0,0,0))
    haccum = haccum + skip
  else
    typeout(3,"  ( nop )")
  end
  haccum = haccum + hlist.depth
  return head, hlist
end
@ With the last two functions we can go back to building the page. When
the callback calling reason is |box|, \LuaTeX{} is inserting horizontal
material. When it is |after_display|, \LuaTeX{} has inserted display-mode math.
They are both processed by the same function, which goes through the contribution
list, aligning any new material -- you should recall that the contribution list
may contain already processed material, so we have to start from |lastprebox|,
which was updated when the callback was called with a |pre_box| reason.
@<Lua functions@>={lua}
local function align_box(head)
  if lastprebox then
    head = lastprebox.next
    lastprebox = nil
  end
  if loglevel>= 3 then ccshowbox.showheadlist(head,0,"  << .") end
  local cur = head
  while cur do
    local actions = { [ccbase.GLUE_TYPE]  = freeze_glue,
                      [ccbase.HLIST_TYPE] = align_hlist }
    local fn = actions[cur.id]
    if fn then head, cur = fn(head,cur) end
    cur = cur.next
  end
  if loglevel >= 3 then ccshowbox.showheadlist(head,0,"  >> .") end
end
@ @<Build page actions@>={lua}
after_display  = align_box,
box            = align_box,


